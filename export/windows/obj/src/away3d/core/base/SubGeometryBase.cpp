#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_away3d_core_base_Geometry
#include <away3d/core/base/Geometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_ISubGeometry
#include <away3d/core/base/ISubGeometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_SubGeometryBase
#include <away3d/core/base/SubGeometryBase.h>
#endif
#ifndef INCLUDED_away3d_core_managers_Stage3DProxy
#include <away3d/core/managers/Stage3DProxy.h>
#endif
#ifndef INCLUDED_away3d_errors_AbstractMethodError
#include <away3d/errors/AbstractMethodError.h>
#endif
#ifndef INCLUDED_away3d_library_assets_IAsset
#include <away3d/library/assets/IAsset.h>
#endif
#ifndef INCLUDED_away3d_library_assets_NamedAssetBase
#include <away3d/library/assets/NamedAssetBase.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl__Vector_BoolVector
#include <openfl/_Vector/BoolVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_14_new,"away3d.core.base.SubGeometryBase","new",0x68b88ef8,"away3d.core.base.SubGeometryBase.new","away3d/core/base/SubGeometryBase.hx",14,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_79_get_autoGenerateDummyUVs,"away3d.core.base.SubGeometryBase","get_autoGenerateDummyUVs",0x4b976f9f,"away3d.core.base.SubGeometryBase.get_autoGenerateDummyUVs","away3d/core/base/SubGeometryBase.hx",79,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_83_set_autoGenerateDummyUVs,"away3d.core.base.SubGeometryBase","set_autoGenerateDummyUVs",0x5e71f113,"away3d.core.base.SubGeometryBase.set_autoGenerateDummyUVs","away3d/core/base/SubGeometryBase.hx",83,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_95_get_autoDeriveVertexNormals,"away3d.core.base.SubGeometryBase","get_autoDeriveVertexNormals",0xaa1270c1,"away3d.core.base.SubGeometryBase.get_autoDeriveVertexNormals","away3d/core/base/SubGeometryBase.hx",95,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_99_set_autoDeriveVertexNormals,"away3d.core.base.SubGeometryBase","set_autoDeriveVertexNormals",0xecab4fcd,"away3d.core.base.SubGeometryBase.set_autoDeriveVertexNormals","away3d/core/base/SubGeometryBase.hx",99,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_110_get_useFaceWeights,"away3d.core.base.SubGeometryBase","get_useFaceWeights",0x00a26908,"away3d.core.base.SubGeometryBase.get_useFaceWeights","away3d/core/base/SubGeometryBase.hx",110,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_114_set_useFaceWeights,"away3d.core.base.SubGeometryBase","set_useFaceWeights",0xdd519b7c,"away3d.core.base.SubGeometryBase.set_useFaceWeights","away3d/core/base/SubGeometryBase.hx",114,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_129_get_numTriangles,"away3d.core.base.SubGeometryBase","get_numTriangles",0x8f362876,"away3d.core.base.SubGeometryBase.get_numTriangles","away3d/core/base/SubGeometryBase.hx",129,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_138_getIndexBuffer,"away3d.core.base.SubGeometryBase","getIndexBuffer",0x0465d124,"away3d.core.base.SubGeometryBase.getIndexBuffer","away3d/core/base/SubGeometryBase.hx",138,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_159_updateFaceTangents,"away3d.core.base.SubGeometryBase","updateFaceTangents",0xd2ab0ddc,"away3d.core.base.SubGeometryBase.updateFaceTangents","away3d/core/base/SubGeometryBase.hx",159,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_221_updateFaceNormals,"away3d.core.base.SubGeometryBase","updateFaceNormals",0xbc0a265e,"away3d.core.base.SubGeometryBase.updateFaceNormals","away3d/core/base/SubGeometryBase.hx",221,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_285_updateVertexNormals,"away3d.core.base.SubGeometryBase","updateVertexNormals",0x58a61837,"away3d.core.base.SubGeometryBase.updateVertexNormals","away3d/core/base/SubGeometryBase.hx",285,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_351_updateVertexTangents,"away3d.core.base.SubGeometryBase","updateVertexTangents",0x3e82b9e3,"away3d.core.base.SubGeometryBase.updateVertexTangents","away3d/core/base/SubGeometryBase.hx",351,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_415_dispose,"away3d.core.base.SubGeometryBase","dispose",0xccd06b37,"away3d.core.base.SubGeometryBase.dispose","away3d/core/base/SubGeometryBase.hx",415,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_432_get_indexData,"away3d.core.base.SubGeometryBase","get_indexData",0xa4e2cecb,"away3d.core.base.SubGeometryBase.get_indexData","away3d/core/base/SubGeometryBase.hx",432,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_440_updateIndexData,"away3d.core.base.SubGeometryBase","updateIndexData",0x03d021ab,"away3d.core.base.SubGeometryBase.updateIndexData","away3d/core/base/SubGeometryBase.hx",440,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_463_disposeIndexBuffers,"away3d.core.base.SubGeometryBase","disposeIndexBuffers",0xf9a4c458,"away3d.core.base.SubGeometryBase.disposeIndexBuffers","away3d/core/base/SubGeometryBase.hx",463,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_477_disposeVertexBuffers,"away3d.core.base.SubGeometryBase","disposeVertexBuffers",0x2205d2b8,"away3d.core.base.SubGeometryBase.disposeVertexBuffers","away3d/core/base/SubGeometryBase.hx",477,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_491_get_autoDeriveVertexTangents,"away3d.core.base.SubGeometryBase","get_autoDeriveVertexTangents",0x2be3da19,"away3d.core.base.SubGeometryBase.get_autoDeriveVertexTangents","away3d/core/base/SubGeometryBase.hx",491,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_495_set_autoDeriveVertexTangents,"away3d.core.base.SubGeometryBase","set_autoDeriveVertexTangents",0x2f0e258d,"away3d.core.base.SubGeometryBase.set_autoDeriveVertexTangents","away3d/core/base/SubGeometryBase.hx",495,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_508_get_faceNormals,"away3d.core.base.SubGeometryBase","get_faceNormals",0xc8fa5b7e,"away3d.core.base.SubGeometryBase.get_faceNormals","away3d/core/base/SubGeometryBase.hx",508,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_520_invalidateBuffers,"away3d.core.base.SubGeometryBase","invalidateBuffers",0xfeb5bfd0,"away3d.core.base.SubGeometryBase.invalidateBuffers","away3d/core/base/SubGeometryBase.hx",520,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_526_get_UVStride,"away3d.core.base.SubGeometryBase","get_UVStride",0xcd1ebfcb,"away3d.core.base.SubGeometryBase.get_UVStride","away3d/core/base/SubGeometryBase.hx",526,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_532_get_vertexData,"away3d.core.base.SubGeometryBase","get_vertexData",0xd036805f,"away3d.core.base.SubGeometryBase.get_vertexData","away3d/core/base/SubGeometryBase.hx",532,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_538_get_vertexPositionData,"away3d.core.base.SubGeometryBase","get_vertexPositionData",0xc8c712a8,"away3d.core.base.SubGeometryBase.get_vertexPositionData","away3d/core/base/SubGeometryBase.hx",538,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_544_get_vertexNormalData,"away3d.core.base.SubGeometryBase","get_vertexNormalData",0xb867d3e6,"away3d.core.base.SubGeometryBase.get_vertexNormalData","away3d/core/base/SubGeometryBase.hx",544,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_550_get_vertexTangentData,"away3d.core.base.SubGeometryBase","get_vertexTangentData",0x83b01bfa,"away3d.core.base.SubGeometryBase.get_vertexTangentData","away3d/core/base/SubGeometryBase.hx",550,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_556_get_UVData,"away3d.core.base.SubGeometryBase","get_UVData",0x3152455c,"away3d.core.base.SubGeometryBase.get_UVData","away3d/core/base/SubGeometryBase.hx",556,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_562_get_vertexStride,"away3d.core.base.SubGeometryBase","get_vertexStride",0x19ca018e,"away3d.core.base.SubGeometryBase.get_vertexStride","away3d/core/base/SubGeometryBase.hx",562,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_568_get_vertexNormalStride,"away3d.core.base.SubGeometryBase","get_vertexNormalStride",0x6f9c84d5,"away3d.core.base.SubGeometryBase.get_vertexNormalStride","away3d/core/base/SubGeometryBase.hx",568,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_574_get_vertexTangentStride,"away3d.core.base.SubGeometryBase","get_vertexTangentStride",0xd395f9e9,"away3d.core.base.SubGeometryBase.get_vertexTangentStride","away3d/core/base/SubGeometryBase.hx",574,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_580_get_vertexOffset,"away3d.core.base.SubGeometryBase","get_vertexOffset",0x68d97908,"away3d.core.base.SubGeometryBase.get_vertexOffset","away3d/core/base/SubGeometryBase.hx",580,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_586_get_vertexNormalOffset,"away3d.core.base.SubGeometryBase","get_vertexNormalOffset",0xbeabfc4f,"away3d.core.base.SubGeometryBase.get_vertexNormalOffset","away3d/core/base/SubGeometryBase.hx",586,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_592_get_vertexTangentOffset,"away3d.core.base.SubGeometryBase","get_vertexTangentOffset",0x22a57163,"away3d.core.base.SubGeometryBase.get_vertexTangentOffset","away3d/core/base/SubGeometryBase.hx",592,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_598_get_UVOffset,"away3d.core.base.SubGeometryBase","get_UVOffset",0x1c2e3745,"away3d.core.base.SubGeometryBase.get_UVOffset","away3d/core/base/SubGeometryBase.hx",598,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_604_invalidateBounds,"away3d.core.base.SubGeometryBase","invalidateBounds",0xd4aae4b8,"away3d.core.base.SubGeometryBase.invalidateBounds","away3d/core/base/SubGeometryBase.hx",604,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_615_get_parentGeometry,"away3d.core.base.SubGeometryBase","get_parentGeometry",0xe1544b2d,"away3d.core.base.SubGeometryBase.get_parentGeometry","away3d/core/base/SubGeometryBase.hx",615,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_619_set_parentGeometry,"away3d.core.base.SubGeometryBase","set_parentGeometry",0xbe037da1,"away3d.core.base.SubGeometryBase.set_parentGeometry","away3d/core/base/SubGeometryBase.hx",619,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_631_get_scaleU,"away3d.core.base.SubGeometryBase","get_scaleU",0xbf701ebc,"away3d.core.base.SubGeometryBase.get_scaleU","away3d/core/base/SubGeometryBase.hx",631,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_636_get_scaleV,"away3d.core.base.SubGeometryBase","get_scaleV",0xbf701ebd,"away3d.core.base.SubGeometryBase.get_scaleV","away3d/core/base/SubGeometryBase.hx",636,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_640_scaleUV,"away3d.core.base.SubGeometryBase","scaleUV",0x768b3a03,"away3d.core.base.SubGeometryBase.scaleUV","away3d/core/base/SubGeometryBase.hx",640,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_664_scale,"away3d.core.base.SubGeometryBase","scale",0x52d26322,"away3d.core.base.SubGeometryBase.scale","away3d/core/base/SubGeometryBase.hx",664,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_680_applyTransformation,"away3d.core.base.SubGeometryBase","applyTransformation",0x8f23aa6f,"away3d.core.base.SubGeometryBase.applyTransformation","away3d/core/base/SubGeometryBase.hx",680,0xa6a5bb59)
HX_LOCAL_STACK_FRAME(_hx_pos_ec1ff890e1dd75ac_755_updateDummyUVs,"away3d.core.base.SubGeometryBase","updateDummyUVs",0xbd1e115b,"away3d.core.base.SubGeometryBase.updateDummyUVs","away3d/core/base/SubGeometryBase.hx",755,0xa6a5bb59)
namespace away3d{
namespace core{
namespace base{

void SubGeometryBase_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_14_new)
HXLINE(  66)		this->_uvsDirty = true;
HXLINE(  64)		this->_scaleV = ((Float)1);
HXLINE(  63)		this->_scaleU = ((Float)1);
HXLINE(  58)		this->_vertexTangentsDirty = true;
HXLINE(  57)		this->_vertexNormalsDirty = true;
HXLINE(  56)		this->_useFaceWeights = false;
HXLINE(  55)		this->_autoGenerateUVs = false;
HXLINE(  54)		this->_autoDeriveVertexTangents = true;
HXLINE(  53)		this->_autoDeriveVertexNormals = true;
HXLINE(  50)		::Array< bool > array = null();
HXDLIN(  50)		this->_indicesInvalid =  ::openfl::_Vector::BoolVector_obj::__alloc( HX_CTX ,8,true,array);
HXLINE(  49)		bool fixed = null();
HXDLIN(  49)		::Array< ::Dynamic> array1 = null();
HXDLIN(  49)		this->_indexBufferContext =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,8,fixed,array1,true);
HXLINE(  47)		bool fixed1 = null();
HXDLIN(  47)		::Array< ::Dynamic> array2 = null();
HXDLIN(  47)		this->_indexBuffer =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,8,fixed1,array2,true);
HXLINE(  44)		this->_faceTangentsDirty = true;
HXLINE(  43)		this->_faceNormalsDirty = true;
            	}

Dynamic SubGeometryBase_obj::__CreateEmpty() { return new SubGeometryBase_obj; }

void *SubGeometryBase_obj::_hx_vtable = 0;

Dynamic SubGeometryBase_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SubGeometryBase_obj > _hx_result = new SubGeometryBase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SubGeometryBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x392651b0;
}

bool SubGeometryBase_obj::get_autoGenerateDummyUVs(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_79_get_autoGenerateDummyUVs)
HXDLIN(  79)		return this->_autoGenerateUVs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_autoGenerateDummyUVs,return )

bool SubGeometryBase_obj::set_autoGenerateDummyUVs(bool value){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_83_set_autoGenerateDummyUVs)
HXLINE(  84)		this->_autoGenerateUVs = value;
HXLINE(  85)		this->_uvsDirty = value;
HXLINE(  86)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,set_autoGenerateDummyUVs,return )

bool SubGeometryBase_obj::get_autoDeriveVertexNormals(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_95_get_autoDeriveVertexNormals)
HXDLIN(  95)		return this->_autoDeriveVertexNormals;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_autoDeriveVertexNormals,return )

bool SubGeometryBase_obj::set_autoDeriveVertexNormals(bool value){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_99_set_autoDeriveVertexNormals)
HXLINE( 100)		this->_autoDeriveVertexNormals = value;
HXLINE( 101)		this->_vertexNormalsDirty = value;
HXLINE( 102)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,set_autoDeriveVertexNormals,return )

bool SubGeometryBase_obj::get_useFaceWeights(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_110_get_useFaceWeights)
HXDLIN( 110)		return this->_useFaceWeights;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_useFaceWeights,return )

bool SubGeometryBase_obj::set_useFaceWeights(bool value){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_114_set_useFaceWeights)
HXLINE( 115)		this->_useFaceWeights = value;
HXLINE( 116)		if (this->_autoDeriveVertexNormals) {
HXLINE( 117)			this->_vertexNormalsDirty = true;
            		}
HXLINE( 118)		if (this->_autoDeriveVertexTangents) {
HXLINE( 119)			this->_vertexTangentsDirty = true;
            		}
HXLINE( 120)		this->_faceNormalsDirty = true;
HXLINE( 121)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,set_useFaceWeights,return )

int SubGeometryBase_obj::get_numTriangles(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_129_get_numTriangles)
HXDLIN( 129)		return this->_numTriangles;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_numTriangles,return )

 ::openfl::display3D::IndexBuffer3D SubGeometryBase_obj::getIndexBuffer( ::away3d::core::managers::Stage3DProxy stage3DProxy){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_138_getIndexBuffer)
HXLINE( 139)		int contextIndex = stage3DProxy->_stage3DIndex;
HXLINE( 140)		 ::openfl::display3D::Context3D context = stage3DProxy->_context3D;
HXLINE( 142)		bool _hx_tmp;
HXDLIN( 142)		if (::hx::IsNotNull( this->_indexBuffer->get(contextIndex).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 142)			_hx_tmp = ::hx::IsInstanceNotEq( this->_indexBufferContext->get(contextIndex).StaticCast<  ::openfl::display3D::Context3D >(),context );
            		}
            		else {
HXLINE( 142)			_hx_tmp = true;
            		}
HXDLIN( 142)		if (_hx_tmp) {
HXLINE( 143)			{
HXLINE( 143)				::Dynamic this1 = this->_indexBuffer;
HXDLIN( 143)				( ( ::openfl::_Vector::ObjectVector)(this1) )->set(contextIndex,stage3DProxy->createIndexBuffer(this->_numIndices)).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
HXLINE( 144)			this->_indexBufferContext->set(contextIndex,context).StaticCast<  ::openfl::display3D::Context3D >();
HXLINE( 145)			this->_indicesInvalid->set(contextIndex,true);
            		}
HXLINE( 147)		if (this->_indicesInvalid->get(contextIndex)) {
HXLINE( 148)			 ::openfl::display3D::IndexBuffer3D _hx_tmp = this->_indexBuffer->get(contextIndex).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
HXDLIN( 148)			_hx_tmp->uploadFromVector(this->_indices,0,this->_numIndices);
HXLINE( 149)			this->_indicesInvalid->set(contextIndex,false);
            		}
HXLINE( 152)		return this->_indexBuffer->get(contextIndex).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,getIndexBuffer,return )

void SubGeometryBase_obj::updateFaceTangents(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_159_updateFaceTangents)
HXLINE( 160)		int i = 0;
HXLINE( 161)		int index1;
HXDLIN( 161)		int index2;
HXDLIN( 161)		int index3;
HXLINE( 162)		int len = this->_indices->get_length();
HXLINE( 163)		int ui;
HXDLIN( 163)		int vi;
HXLINE( 164)		Float v0;
HXLINE( 165)		Float dv1;
HXDLIN( 165)		Float dv2;
HXLINE( 166)		Float denom;
HXLINE( 167)		Float x0;
HXDLIN( 167)		Float y0;
HXDLIN( 167)		Float z0;
HXLINE( 168)		Float dx1;
HXDLIN( 168)		Float dy1;
HXDLIN( 168)		Float dz1;
HXLINE( 169)		Float dx2;
HXDLIN( 169)		Float dy2;
HXDLIN( 169)		Float dz2;
HXLINE( 170)		Float cx;
HXDLIN( 170)		Float cy;
HXDLIN( 170)		Float cz;
HXLINE( 171)		 ::openfl::_Vector::FloatVector vertices = this->_vertexData;
HXLINE( 172)		 ::openfl::_Vector::FloatVector uvs = this->get_UVData();
HXLINE( 173)		int posStride = this->get_vertexStride();
HXLINE( 174)		int posOffset = this->get_vertexOffset();
HXLINE( 175)		int texStride = this->get_UVStride();
HXLINE( 176)		int texOffset = this->get_UVOffset();
HXLINE( 178)		if (::hx::IsNull( this->_faceTangents )) {
HXLINE( 179)			::Array< Float > array = null();
HXDLIN( 179)			this->_faceTangents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::get_length(this->_indices),true,array,true);
            		}
HXLINE( 181)		while((i < len)){
HXLINE( 182)			index1 = this->_indices->get(i);
HXLINE( 183)			index2 = this->_indices->get((i + 1));
HXLINE( 184)			index3 = this->_indices->get((i + 2));
HXLINE( 186)			ui = ((texOffset + (index1 * texStride)) + 1);
HXLINE( 187)			v0 = uvs->get(ui);
HXLINE( 188)			ui = ((texOffset + (index2 * texStride)) + 1);
HXLINE( 189)			dv1 = (uvs->get(ui) - v0);
HXLINE( 190)			ui = ((texOffset + (index3 * texStride)) + 1);
HXLINE( 191)			dv2 = (uvs->get(ui) - v0);
HXLINE( 193)			vi = (posOffset + (index1 * posStride));
HXLINE( 194)			x0 = vertices->get(vi);
HXLINE( 195)			y0 = vertices->get((vi + 1));
HXLINE( 196)			z0 = vertices->get((vi + 2));
HXLINE( 197)			vi = (posOffset + (index2 * posStride));
HXLINE( 198)			dx1 = (vertices->get(vi) - x0);
HXLINE( 199)			dy1 = (vertices->get((vi + 1)) - y0);
HXLINE( 200)			dz1 = (vertices->get((vi + 2)) - z0);
HXLINE( 201)			vi = (posOffset + (index3 * posStride));
HXLINE( 202)			dx2 = (vertices->get(vi) - x0);
HXLINE( 203)			dy2 = (vertices->get((vi + 1)) - y0);
HXLINE( 204)			dz2 = (vertices->get((vi + 2)) - z0);
HXLINE( 205)			cx = ((dv2 * dx1) - (dv1 * dx2));
HXLINE( 206)			cy = ((dv2 * dy1) - (dv1 * dy2));
HXLINE( 207)			cz = ((dv2 * dz1) - (dv1 * dz2));
HXLINE( 208)			denom = (( (Float)(1) ) / ::Math_obj::sqrt((((cx * cx) + (cy * cy)) + (cz * cz))));
HXLINE( 209)			{
HXLINE( 209)				i = (i + 1);
HXDLIN( 209)				this->_faceTangents->set((i - 1),(denom * cx));
            			}
HXLINE( 210)			{
HXLINE( 210)				i = (i + 1);
HXDLIN( 210)				this->_faceTangents->set((i - 1),(denom * cy));
            			}
HXLINE( 211)			{
HXLINE( 211)				i = (i + 1);
HXDLIN( 211)				this->_faceTangents->set((i - 1),(denom * cz));
            			}
            		}
HXLINE( 214)		this->_faceTangentsDirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,updateFaceTangents,(void))

void SubGeometryBase_obj::updateFaceNormals(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_221_updateFaceNormals)
HXLINE( 222)		int i = 0;
HXDLIN( 222)		int j = 0;
HXDLIN( 222)		int k = 0;
HXLINE( 223)		int index;
HXLINE( 224)		int len = this->_indices->get_length();
HXLINE( 225)		Float x1;
HXDLIN( 225)		Float x2;
HXDLIN( 225)		Float x3;
HXLINE( 226)		Float y1;
HXDLIN( 226)		Float y2;
HXDLIN( 226)		Float y3;
HXLINE( 227)		Float z1;
HXDLIN( 227)		Float z2;
HXDLIN( 227)		Float z3;
HXLINE( 228)		Float dx1;
HXDLIN( 228)		Float dy1;
HXDLIN( 228)		Float dz1;
HXLINE( 229)		Float dx2;
HXDLIN( 229)		Float dy2;
HXDLIN( 229)		Float dz2;
HXLINE( 230)		Float cx;
HXDLIN( 230)		Float cy;
HXDLIN( 230)		Float cz;
HXLINE( 231)		Float d;
HXLINE( 232)		 ::openfl::_Vector::FloatVector vertices = this->_vertexData;
HXLINE( 233)		int posStride = this->get_vertexStride();
HXLINE( 234)		int posOffset = this->get_vertexOffset();
HXLINE( 236)		if (::hx::IsNull( this->_faceNormals )) {
HXLINE( 237)			::Array< Float > array = null();
HXDLIN( 237)			this->_faceNormals =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,len,true,array,true);
            		}
HXLINE( 239)		if (::hx::IsNull( this->_faceWeights )) {
HXLINE( 240)			::Array< Float > array = null();
HXDLIN( 240)			this->_faceWeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((( (Float)(len) ) / ( (Float)(3) ))),true,array,true);
            		}
HXLINE( 242)		while((i < len)){
HXLINE( 243)			i = (i + 1);
HXDLIN( 243)			index = (posOffset + (this->_indices->get((i - 1)) * posStride));
HXLINE( 244)			x1 = vertices->get(index);
HXLINE( 245)			y1 = vertices->get((index + 1));
HXLINE( 246)			z1 = vertices->get((index + 2));
HXLINE( 247)			i = (i + 1);
HXDLIN( 247)			index = (posOffset + (this->_indices->get((i - 1)) * posStride));
HXLINE( 248)			x2 = vertices->get(index);
HXLINE( 249)			y2 = vertices->get((index + 1));
HXLINE( 250)			z2 = vertices->get((index + 2));
HXLINE( 251)			i = (i + 1);
HXDLIN( 251)			index = (posOffset + (this->_indices->get((i - 1)) * posStride));
HXLINE( 252)			x3 = vertices->get(index);
HXLINE( 253)			y3 = vertices->get((index + 1));
HXLINE( 254)			z3 = vertices->get((index + 2));
HXLINE( 255)			dx1 = (x3 - x1);
HXLINE( 256)			dy1 = (y3 - y1);
HXLINE( 257)			dz1 = (z3 - z1);
HXLINE( 258)			dx2 = (x2 - x1);
HXLINE( 259)			dy2 = (y2 - y1);
HXLINE( 260)			dz2 = (z2 - z1);
HXLINE( 261)			cx = ((dz1 * dy2) - (dy1 * dz2));
HXLINE( 262)			cy = ((dx1 * dz2) - (dz1 * dx2));
HXLINE( 263)			cz = ((dy1 * dx2) - (dx1 * dy2));
HXLINE( 264)			d = ::Math_obj::sqrt((((cx * cx) + (cy * cy)) + (cz * cz)));
HXLINE( 266)			if (this->_useFaceWeights) {
HXLINE( 267)				Float w = (d * ( (Float)(10000) ));
HXLINE( 268)				if ((w < 1)) {
HXLINE( 269)					w = ( (Float)(1) );
            				}
HXLINE( 270)				{
HXLINE( 270)					k = (k + 1);
HXDLIN( 270)					this->_faceWeights->set((k - 1),w);
            				}
            			}
HXLINE( 272)			d = (( (Float)(1) ) / d);
HXLINE( 273)			{
HXLINE( 273)				j = (j + 1);
HXDLIN( 273)				this->_faceNormals->set((j - 1),(cx * d));
            			}
HXLINE( 274)			{
HXLINE( 274)				j = (j + 1);
HXDLIN( 274)				this->_faceNormals->set((j - 1),(cy * d));
            			}
HXLINE( 275)			{
HXLINE( 275)				j = (j + 1);
HXDLIN( 275)				this->_faceNormals->set((j - 1),(cz * d));
            			}
            		}
HXLINE( 278)		this->_faceNormalsDirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,updateFaceNormals,(void))

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::updateVertexNormals( ::openfl::_Vector::FloatVector target){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_285_updateVertexNormals)
HXLINE( 286)		if (this->_faceNormalsDirty) {
HXLINE( 287)			this->updateFaceNormals();
            		}
HXLINE( 290)		int f1 = 0;
HXDLIN( 290)		int f2 = 1;
HXDLIN( 290)		int f3 = 2;
HXLINE( 291)		int lenV = this->_vertexData->get_length();
HXLINE( 292)		int normalStride = this->get_vertexNormalStride();
HXLINE( 293)		int normalOffset = this->get_vertexNormalOffset();
HXLINE( 295)		if (::hx::IsNull( target )) {
HXLINE( 296)			::Array< Float > array = null();
HXDLIN( 296)			target =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,lenV,true,array,true);
            		}
HXLINE( 289)		int v1 = normalOffset;
HXLINE( 299)		while((v1 < lenV)){
HXLINE( 300)			target->set(v1,((Float)0.0));
HXLINE( 301)			target->set((v1 + 1),((Float)0.0));
HXLINE( 302)			target->set((v1 + 2),((Float)0.0));
HXLINE( 303)			v1 = (v1 + normalStride);
            		}
HXLINE( 306)		int i = 0;
HXDLIN( 306)		int k = 0;
HXLINE( 307)		int lenI = this->_indices->get_length();
HXLINE( 308)		int index;
HXLINE( 309)		Float weight;
HXLINE( 311)		while((i < lenI)){
HXLINE( 312)			if (this->_useFaceWeights) {
HXLINE( 312)				k = (k + 1);
HXDLIN( 312)				weight = this->_faceWeights->get((k - 1));
            			}
            			else {
HXLINE( 312)				weight = ( (Float)(1) );
            			}
HXLINE( 313)			i = (i + 1);
HXDLIN( 313)			index = (normalOffset + (this->_indices->get((i - 1)) * normalStride));
HXLINE( 314)			{
HXLINE( 314)				index = (index + 1);
HXDLIN( 314)				int _g = (index - 1);
HXDLIN( 314)				 ::openfl::_Vector::FloatVector _g1 = target;
HXDLIN( 314)				{
HXLINE( 314)					Float value = _g1->get(_g);
HXDLIN( 314)					_g1->set(_g,(value + (this->_faceNormals->get(f1) * weight)));
            				}
            			}
HXLINE( 315)			{
HXLINE( 315)				index = (index + 1);
HXDLIN( 315)				int _g2 = (index - 1);
HXDLIN( 315)				 ::openfl::_Vector::FloatVector _g3 = target;
HXDLIN( 315)				{
HXLINE( 315)					Float value1 = _g3->get(_g2);
HXDLIN( 315)					_g3->set(_g2,(value1 + (this->_faceNormals->get(f2) * weight)));
            				}
            			}
HXLINE( 316)			{
HXLINE( 316)				int _g4 = index;
HXDLIN( 316)				 ::openfl::_Vector::FloatVector _g5 = target;
HXDLIN( 316)				{
HXLINE( 316)					Float value2 = _g5->get(_g4);
HXDLIN( 316)					_g5->set(_g4,(value2 + (this->_faceNormals->get(f3) * weight)));
            				}
            			}
HXLINE( 317)			i = (i + 1);
HXDLIN( 317)			index = (normalOffset + (this->_indices->get((i - 1)) * normalStride));
HXLINE( 318)			{
HXLINE( 318)				index = (index + 1);
HXDLIN( 318)				int _g6 = (index - 1);
HXDLIN( 318)				 ::openfl::_Vector::FloatVector _g7 = target;
HXDLIN( 318)				{
HXLINE( 318)					Float value3 = _g7->get(_g6);
HXDLIN( 318)					_g7->set(_g6,(value3 + (this->_faceNormals->get(f1) * weight)));
            				}
            			}
HXLINE( 319)			{
HXLINE( 319)				index = (index + 1);
HXDLIN( 319)				int _g8 = (index - 1);
HXDLIN( 319)				 ::openfl::_Vector::FloatVector _g9 = target;
HXDLIN( 319)				{
HXLINE( 319)					Float value4 = _g9->get(_g8);
HXDLIN( 319)					_g9->set(_g8,(value4 + (this->_faceNormals->get(f2) * weight)));
            				}
            			}
HXLINE( 320)			{
HXLINE( 320)				int _g10 = index;
HXDLIN( 320)				 ::openfl::_Vector::FloatVector _g11 = target;
HXDLIN( 320)				{
HXLINE( 320)					Float value5 = _g11->get(_g10);
HXDLIN( 320)					_g11->set(_g10,(value5 + (this->_faceNormals->get(f3) * weight)));
            				}
            			}
HXLINE( 321)			i = (i + 1);
HXDLIN( 321)			index = (normalOffset + (this->_indices->get((i - 1)) * normalStride));
HXLINE( 322)			{
HXLINE( 322)				index = (index + 1);
HXDLIN( 322)				int _g12 = (index - 1);
HXDLIN( 322)				 ::openfl::_Vector::FloatVector _g13 = target;
HXDLIN( 322)				{
HXLINE( 322)					Float value6 = _g13->get(_g12);
HXDLIN( 322)					_g13->set(_g12,(value6 + (this->_faceNormals->get(f1) * weight)));
            				}
            			}
HXLINE( 323)			{
HXLINE( 323)				index = (index + 1);
HXDLIN( 323)				int _g14 = (index - 1);
HXDLIN( 323)				 ::openfl::_Vector::FloatVector _g15 = target;
HXDLIN( 323)				{
HXLINE( 323)					Float value7 = _g15->get(_g14);
HXDLIN( 323)					_g15->set(_g14,(value7 + (this->_faceNormals->get(f2) * weight)));
            				}
            			}
HXLINE( 324)			{
HXLINE( 324)				int _g16 = index;
HXDLIN( 324)				 ::openfl::_Vector::FloatVector _g17 = target;
HXDLIN( 324)				{
HXLINE( 324)					Float value8 = _g17->get(_g16);
HXDLIN( 324)					_g17->set(_g16,(value8 + (this->_faceNormals->get(f3) * weight)));
            				}
            			}
HXLINE( 325)			f1 = (f1 + 3);
HXLINE( 326)			f2 = (f2 + 3);
HXLINE( 327)			f3 = (f3 + 3);
            		}
HXLINE( 330)		v1 = normalOffset;
HXLINE( 331)		while((v1 < lenV)){
HXLINE( 332)			Float vx = target->get(v1);
HXLINE( 333)			Float vy = target->get((v1 + 1));
HXLINE( 334)			Float vz = target->get((v1 + 2));
HXLINE( 335)			Float d = (((Float)1.0) / ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz))));
HXLINE( 336)			target->set(v1,(vx * d));
HXLINE( 337)			target->set((v1 + 1),(vy * d));
HXLINE( 338)			target->set((v1 + 2),(vz * d));
HXLINE( 339)			v1 = (v1 + normalStride);
            		}
HXLINE( 342)		this->_vertexNormalsDirty = false;
HXLINE( 344)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,updateVertexNormals,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::updateVertexTangents( ::openfl::_Vector::FloatVector target){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_351_updateVertexTangents)
HXLINE( 352)		if (this->_faceTangentsDirty) {
HXLINE( 353)			this->updateFaceTangents();
            		}
HXLINE( 355)		int i = 0;
HXLINE( 356)		int lenV = this->_vertexData->get_length();
HXLINE( 357)		int tangentStride = this->get_vertexTangentStride();
HXLINE( 358)		int tangentOffset = this->get_vertexTangentOffset();
HXLINE( 360)		if (::hx::IsNull( target )) {
HXLINE( 361)			::Array< Float > array = null();
HXDLIN( 361)			target =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,lenV,true,array,true);
            		}
HXLINE( 363)		i = tangentOffset;
HXLINE( 364)		while((i < lenV)){
HXLINE( 365)			target->set(i,((Float)0.0));
HXLINE( 366)			target->set((i + 1),((Float)0.0));
HXLINE( 367)			target->set((i + 2),((Float)0.0));
HXLINE( 368)			i = (i + tangentStride);
            		}
HXLINE( 371)		int k = 0;
HXLINE( 372)		int lenI = this->_indices->get_length();
HXLINE( 373)		int index;
HXLINE( 374)		Float weight;
HXLINE( 375)		int f1 = 0;
HXDLIN( 375)		int f2 = 1;
HXDLIN( 375)		int f3 = 2;
HXLINE( 376)		i = 0;
HXLINE( 378)		while((i < lenI)){
HXLINE( 379)			if (this->_useFaceWeights) {
HXLINE( 379)				k = (k + 1);
HXDLIN( 379)				weight = this->_faceWeights->get((k - 1));
            			}
            			else {
HXLINE( 379)				weight = ( (Float)(1) );
            			}
HXLINE( 380)			i = (i + 1);
HXDLIN( 380)			index = (tangentOffset + (this->_indices->get((i - 1)) * tangentStride));
HXLINE( 381)			{
HXLINE( 381)				index = (index + 1);
HXDLIN( 381)				int _g = (index - 1);
HXDLIN( 381)				 ::openfl::_Vector::FloatVector _g1 = target;
HXDLIN( 381)				{
HXLINE( 381)					Float value = _g1->get(_g);
HXDLIN( 381)					_g1->set(_g,(value + (this->_faceTangents->get(f1) * weight)));
            				}
            			}
HXLINE( 382)			{
HXLINE( 382)				index = (index + 1);
HXDLIN( 382)				int _g2 = (index - 1);
HXDLIN( 382)				 ::openfl::_Vector::FloatVector _g3 = target;
HXDLIN( 382)				{
HXLINE( 382)					Float value1 = _g3->get(_g2);
HXDLIN( 382)					_g3->set(_g2,(value1 + (this->_faceTangents->get(f2) * weight)));
            				}
            			}
HXLINE( 383)			{
HXLINE( 383)				int _g4 = index;
HXDLIN( 383)				 ::openfl::_Vector::FloatVector _g5 = target;
HXDLIN( 383)				{
HXLINE( 383)					Float value2 = _g5->get(_g4);
HXDLIN( 383)					_g5->set(_g4,(value2 + (this->_faceTangents->get(f3) * weight)));
            				}
            			}
HXLINE( 384)			i = (i + 1);
HXDLIN( 384)			index = (tangentOffset + (this->_indices->get((i - 1)) * tangentStride));
HXLINE( 385)			{
HXLINE( 385)				index = (index + 1);
HXDLIN( 385)				int _g6 = (index - 1);
HXDLIN( 385)				 ::openfl::_Vector::FloatVector _g7 = target;
HXDLIN( 385)				{
HXLINE( 385)					Float value3 = _g7->get(_g6);
HXDLIN( 385)					_g7->set(_g6,(value3 + (this->_faceTangents->get(f1) * weight)));
            				}
            			}
HXLINE( 386)			{
HXLINE( 386)				index = (index + 1);
HXDLIN( 386)				int _g8 = (index - 1);
HXDLIN( 386)				 ::openfl::_Vector::FloatVector _g9 = target;
HXDLIN( 386)				{
HXLINE( 386)					Float value4 = _g9->get(_g8);
HXDLIN( 386)					_g9->set(_g8,(value4 + (this->_faceTangents->get(f2) * weight)));
            				}
            			}
HXLINE( 387)			{
HXLINE( 387)				int _g10 = index;
HXDLIN( 387)				 ::openfl::_Vector::FloatVector _g11 = target;
HXDLIN( 387)				{
HXLINE( 387)					Float value5 = _g11->get(_g10);
HXDLIN( 387)					_g11->set(_g10,(value5 + (this->_faceTangents->get(f3) * weight)));
            				}
            			}
HXLINE( 388)			i = (i + 1);
HXDLIN( 388)			index = (tangentOffset + (this->_indices->get((i - 1)) * tangentStride));
HXLINE( 389)			{
HXLINE( 389)				index = (index + 1);
HXDLIN( 389)				int _g12 = (index - 1);
HXDLIN( 389)				 ::openfl::_Vector::FloatVector _g13 = target;
HXDLIN( 389)				{
HXLINE( 389)					Float value6 = _g13->get(_g12);
HXDLIN( 389)					_g13->set(_g12,(value6 + (this->_faceTangents->get(f1) * weight)));
            				}
            			}
HXLINE( 390)			{
HXLINE( 390)				index = (index + 1);
HXDLIN( 390)				int _g14 = (index - 1);
HXDLIN( 390)				 ::openfl::_Vector::FloatVector _g15 = target;
HXDLIN( 390)				{
HXLINE( 390)					Float value7 = _g15->get(_g14);
HXDLIN( 390)					_g15->set(_g14,(value7 + (this->_faceTangents->get(f2) * weight)));
            				}
            			}
HXLINE( 391)			{
HXLINE( 391)				int _g16 = index;
HXDLIN( 391)				 ::openfl::_Vector::FloatVector _g17 = target;
HXDLIN( 391)				{
HXLINE( 391)					Float value8 = _g17->get(_g16);
HXDLIN( 391)					_g17->set(_g16,(value8 + (this->_faceTangents->get(f3) * weight)));
            				}
            			}
HXLINE( 392)			f1 = (f1 + 3);
HXLINE( 393)			f2 = (f2 + 3);
HXLINE( 394)			f3 = (f3 + 3);
            		}
HXLINE( 397)		i = tangentOffset;
HXLINE( 398)		while((i < lenV)){
HXLINE( 399)			Float vx = target->get(i);
HXLINE( 400)			Float vy = target->get((i + 1));
HXLINE( 401)			Float vz = target->get((i + 2));
HXLINE( 402)			Float d = (((Float)1.0) / ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz))));
HXLINE( 403)			target->set(i,(vx * d));
HXLINE( 404)			target->set((i + 1),(vy * d));
HXLINE( 405)			target->set((i + 2),(vz * d));
HXLINE( 406)			i = (i + tangentStride);
            		}
HXLINE( 409)		this->_vertexTangentsDirty = false;
HXLINE( 411)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,updateVertexTangents,return )

void SubGeometryBase_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_415_dispose)
HXLINE( 416)		this->disposeIndexBuffers(this->_indexBuffer);
HXLINE( 417)		this->_indices = null();
HXLINE( 418)		this->_indexBufferContext = null();
HXLINE( 419)		this->_faceNormals = null();
HXLINE( 420)		this->_faceWeights = null();
HXLINE( 421)		this->_faceTangents = null();
HXLINE( 422)		this->_vertexData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,dispose,(void))

 ::openfl::_Vector::IntVector SubGeometryBase_obj::get_indexData(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_432_get_indexData)
HXDLIN( 432)		return this->_indices;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_indexData,return )

void SubGeometryBase_obj::updateIndexData( ::openfl::_Vector::IntVector indices){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_440_updateIndexData)
HXLINE( 441)		this->_indices = indices;
HXLINE( 442)		this->_numIndices = indices->get_length();
HXLINE( 444)		int numTriangles = ::Std_obj::_hx_int((( (Float)(this->_numIndices) ) / ( (Float)(3) )));
HXLINE( 445)		if ((this->_numTriangles != numTriangles)) {
HXLINE( 446)			this->disposeIndexBuffers(this->_indexBuffer);
            		}
HXLINE( 447)		this->_numTriangles = numTriangles;
HXLINE( 448)		this->invalidateBuffers(this->_indicesInvalid);
HXLINE( 449)		this->_faceNormalsDirty = true;
HXLINE( 451)		if (this->_autoDeriveVertexNormals) {
HXLINE( 452)			this->_vertexNormalsDirty = true;
            		}
HXLINE( 453)		if (this->_autoDeriveVertexTangents) {
HXLINE( 454)			this->_vertexTangentsDirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,updateIndexData,(void))

void SubGeometryBase_obj::disposeIndexBuffers( ::openfl::_Vector::ObjectVector buffers){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_463_disposeIndexBuffers)
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(0).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(0).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(0,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(1).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(1).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(1,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(2).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(2).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(2,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(3).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(3).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(3,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(4).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(4).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(4,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(5).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(5).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(5,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(6).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(6).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(6,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
HXLINE( 464)		if (::hx::IsNotNull( buffers->get(7).StaticCast<  ::openfl::display3D::IndexBuffer3D >() )) {
HXLINE( 465)			::away3d::core::managers::Stage3DProxy_obj::disposeIndexBuffer(buffers->get(7).StaticCast<  ::openfl::display3D::IndexBuffer3D >());
HXLINE( 466)			{
HXLINE( 466)				 ::openfl::display3D::IndexBuffer3D value = null();
HXDLIN( 466)				buffers->set(7,value).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,disposeIndexBuffers,(void))

void SubGeometryBase_obj::disposeVertexBuffers( ::openfl::_Vector::ObjectVector buffers){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_477_disposeVertexBuffers)
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(0).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(0).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(0,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(1).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(1).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(1,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(2).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(2).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(2,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(3).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(3).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(3,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(4).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(4).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(4,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(5).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(5).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(5,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(6).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(6).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(6,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
HXLINE( 478)		if (::hx::IsNotNull( buffers->get(7).StaticCast<  ::openfl::display3D::VertexBuffer3D >() )) {
HXLINE( 479)			::away3d::core::managers::Stage3DProxy_obj::disposeVertexBuffer(buffers->get(7).StaticCast<  ::openfl::display3D::VertexBuffer3D >());
HXLINE( 480)			{
HXLINE( 480)				 ::openfl::display3D::VertexBuffer3D value = null();
HXDLIN( 480)				buffers->set(7,value).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,disposeVertexBuffers,(void))

bool SubGeometryBase_obj::get_autoDeriveVertexTangents(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_491_get_autoDeriveVertexTangents)
HXDLIN( 491)		return this->_autoDeriveVertexTangents;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_autoDeriveVertexTangents,return )

bool SubGeometryBase_obj::set_autoDeriveVertexTangents(bool value){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_495_set_autoDeriveVertexTangents)
HXLINE( 496)		this->_autoDeriveVertexTangents = value;
HXLINE( 498)		this->_vertexTangentsDirty = value;
HXLINE( 499)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,set_autoDeriveVertexTangents,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_faceNormals(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_508_get_faceNormals)
HXLINE( 509)		if (this->_faceNormalsDirty) {
HXLINE( 510)			this->updateFaceNormals();
            		}
HXLINE( 511)		return this->_faceNormals;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_faceNormals,return )

void SubGeometryBase_obj::invalidateBuffers( ::openfl::_Vector::BoolVector invalid){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_520_invalidateBuffers)
HXLINE( 521)		invalid->set(0,true);
HXDLIN( 521)		invalid->set(1,true);
HXDLIN( 521)		invalid->set(2,true);
HXDLIN( 521)		invalid->set(3,true);
HXDLIN( 521)		invalid->set(4,true);
HXDLIN( 521)		invalid->set(5,true);
HXDLIN( 521)		invalid->set(6,true);
HXDLIN( 521)		invalid->set(7,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,invalidateBuffers,(void))

int SubGeometryBase_obj::get_UVStride(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_526_get_UVStride)
HXDLIN( 526)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 526)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_UVStride,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_vertexData(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_532_get_vertexData)
HXDLIN( 532)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 532)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexData,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_vertexPositionData(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_538_get_vertexPositionData)
HXDLIN( 538)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 538)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexPositionData,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_vertexNormalData(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_544_get_vertexNormalData)
HXDLIN( 544)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 544)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexNormalData,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_vertexTangentData(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_550_get_vertexTangentData)
HXDLIN( 550)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 550)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexTangentData,return )

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::get_UVData(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_556_get_UVData)
HXDLIN( 556)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 556)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_UVData,return )

int SubGeometryBase_obj::get_vertexStride(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_562_get_vertexStride)
HXDLIN( 562)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 562)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexStride,return )

int SubGeometryBase_obj::get_vertexNormalStride(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_568_get_vertexNormalStride)
HXDLIN( 568)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 568)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexNormalStride,return )

int SubGeometryBase_obj::get_vertexTangentStride(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_574_get_vertexTangentStride)
HXDLIN( 574)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 574)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexTangentStride,return )

int SubGeometryBase_obj::get_vertexOffset(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_580_get_vertexOffset)
HXDLIN( 580)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 580)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexOffset,return )

int SubGeometryBase_obj::get_vertexNormalOffset(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_586_get_vertexNormalOffset)
HXDLIN( 586)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 586)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexNormalOffset,return )

int SubGeometryBase_obj::get_vertexTangentOffset(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_592_get_vertexTangentOffset)
HXDLIN( 592)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 592)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_vertexTangentOffset,return )

int SubGeometryBase_obj::get_UVOffset(){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_598_get_UVOffset)
HXDLIN( 598)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 598)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_UVOffset,return )

void SubGeometryBase_obj::invalidateBounds(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_604_invalidateBounds)
HXDLIN( 604)		if (::hx::IsNotNull( this->_parentGeometry )) {
HXLINE( 605)			this->_parentGeometry->invalidateBounds( ::hx::interface_check(::hx::ObjectPtr<OBJ_>(this),0x9241dff8));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,invalidateBounds,(void))

 ::away3d::core::base::Geometry SubGeometryBase_obj::get_parentGeometry(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_615_get_parentGeometry)
HXDLIN( 615)		return this->_parentGeometry;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_parentGeometry,return )

 ::away3d::core::base::Geometry SubGeometryBase_obj::set_parentGeometry( ::away3d::core::base::Geometry value){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_619_set_parentGeometry)
HXLINE( 620)		this->_parentGeometry = value;
HXLINE( 621)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,set_parentGeometry,return )

Float SubGeometryBase_obj::get_scaleU(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_631_get_scaleU)
HXDLIN( 631)		return this->_scaleU;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_scaleU,return )

Float SubGeometryBase_obj::get_scaleV(){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_636_get_scaleV)
HXDLIN( 636)		return this->_scaleV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubGeometryBase_obj,get_scaleV,return )

void SubGeometryBase_obj::scaleUV(::hx::Null< Float >  __o_scaleU,::hx::Null< Float >  __o_scaleV){
            		Float scaleU = __o_scaleU.Default(1);
            		Float scaleV = __o_scaleV.Default(1);
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_640_scaleUV)
HXLINE( 641)		int offset = this->get_UVOffset();
HXLINE( 642)		int stride = this->get_UVStride();
HXLINE( 643)		 ::openfl::_Vector::FloatVector uvs = this->get_UVData();
HXLINE( 644)		int len = uvs->get_length();
HXLINE( 645)		Float ratioU = (scaleU / this->_scaleU);
HXLINE( 646)		Float ratioV = (scaleV / this->_scaleV);
HXLINE( 648)		int i = offset;
HXLINE( 649)		while((i < len)){
HXLINE( 650)			{
HXLINE( 650)				int _g = i;
HXDLIN( 650)				 ::openfl::_Vector::FloatVector _g1 = uvs;
HXDLIN( 650)				_g1->set(_g,(_g1->get(_g) * ratioU));
            			}
HXLINE( 651)			{
HXLINE( 651)				int _g2 = (i + 1);
HXDLIN( 651)				 ::openfl::_Vector::FloatVector _g3 = uvs;
HXDLIN( 651)				_g3->set(_g2,(_g3->get(_g2) * ratioV));
            			}
HXLINE( 652)			i = (i + stride);
            		}
HXLINE( 655)		this->_scaleU = scaleU;
HXLINE( 656)		this->_scaleV = scaleV;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SubGeometryBase_obj,scaleUV,(void))

void SubGeometryBase_obj::scale(Float scale){
            	HX_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_664_scale)
HXLINE( 665)		 ::openfl::_Vector::FloatVector vertices = this->get_UVData();
HXLINE( 666)		int len = vertices->get_length();
HXLINE( 667)		int offset = this->get_vertexOffset();
HXLINE( 668)		int stride = this->get_vertexStride();
HXLINE( 670)		int i = offset;
HXLINE( 671)		while((i < len)){
HXLINE( 672)			{
HXLINE( 672)				int _g = i;
HXDLIN( 672)				 ::openfl::_Vector::FloatVector _g1 = vertices;
HXDLIN( 672)				_g1->set(_g,(_g1->get(_g) * scale));
            			}
HXLINE( 673)			{
HXLINE( 673)				int _g2 = (i + 1);
HXDLIN( 673)				 ::openfl::_Vector::FloatVector _g3 = vertices;
HXDLIN( 673)				_g3->set(_g2,(_g3->get(_g2) * scale));
            			}
HXLINE( 674)			{
HXLINE( 674)				int _g4 = (i + 2);
HXDLIN( 674)				 ::openfl::_Vector::FloatVector _g5 = vertices;
HXDLIN( 674)				_g5->set(_g4,(_g5->get(_g4) * scale));
            			}
HXLINE( 675)			i = (i + stride);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,scale,(void))

void SubGeometryBase_obj::applyTransformation( ::openfl::geom::Matrix3D transform){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_680_applyTransformation)
HXLINE( 681)		 ::openfl::_Vector::FloatVector vertices = this->_vertexData;
HXLINE( 682)		 ::openfl::_Vector::FloatVector normals = this->get_vertexNormalData();
HXLINE( 683)		 ::openfl::_Vector::FloatVector tangents = this->get_vertexTangentData();
HXLINE( 684)		int posStride = this->get_vertexStride();
HXLINE( 685)		int normalStride = this->get_vertexNormalStride();
HXLINE( 686)		int tangentStride = this->get_vertexTangentStride();
HXLINE( 687)		int posOffset = this->get_vertexOffset();
HXLINE( 688)		int normalOffset = this->get_vertexNormalOffset();
HXLINE( 689)		int tangentOffset = this->get_vertexTangentOffset();
HXLINE( 690)		int len = ::Std_obj::_hx_int((( (Float)(vertices->get_length()) ) / ( (Float)(posStride) )));
HXLINE( 691)		int i;
HXDLIN( 691)		int i1;
HXDLIN( 691)		int i2;
HXLINE( 692)		 ::openfl::geom::Vector3D vector =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 694)		bool bakeNormals = ::hx::IsNotNull( normals );
HXLINE( 695)		bool bakeTangents = ::hx::IsNotNull( tangents );
HXLINE( 696)		 ::openfl::geom::Matrix3D invTranspose = null();
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		if (!(bakeNormals)) {
HXLINE( 698)			_hx_tmp = bakeTangents;
            		}
            		else {
HXLINE( 698)			_hx_tmp = true;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 699)			invTranspose = transform->clone();
HXLINE( 700)			invTranspose->invert();
HXLINE( 701)			invTranspose->transpose();
            		}
HXLINE( 704)		int vi0 = posOffset;
HXLINE( 705)		int ni0 = normalOffset;
HXLINE( 706)		int ti0 = tangentOffset;
HXLINE( 708)		{
HXLINE( 708)			int _g = 0;
HXDLIN( 708)			int _g1 = len;
HXDLIN( 708)			while((_g < _g1)){
HXLINE( 708)				_g = (_g + 1);
HXDLIN( 708)				int i = (_g - 1);
HXLINE( 709)				i1 = (vi0 + 1);
HXLINE( 710)				i2 = (vi0 + 2);
HXLINE( 713)				vector->x = vertices->get(vi0);
HXLINE( 714)				vector->y = vertices->get(i1);
HXLINE( 715)				vector->z = vertices->get(i2);
HXLINE( 716)				vector = transform->transformVector(vector);
HXLINE( 717)				vertices->set(vi0,vector->x);
HXLINE( 718)				vertices->set(i1,vector->y);
HXLINE( 719)				vertices->set(i2,vector->z);
HXLINE( 720)				vi0 = (vi0 + posStride);
HXLINE( 723)				if (bakeNormals) {
HXLINE( 724)					i1 = (ni0 + 1);
HXLINE( 725)					i2 = (ni0 + 2);
HXLINE( 726)					vector->x = normals->get(ni0);
HXLINE( 727)					vector->y = normals->get(i1);
HXLINE( 728)					vector->z = normals->get(i2);
HXLINE( 729)					vector = invTranspose->deltaTransformVector(vector);
HXLINE( 730)					vector->normalize();
HXLINE( 731)					normals->set(ni0,vector->x);
HXLINE( 732)					normals->set(i1,vector->y);
HXLINE( 733)					normals->set(i2,vector->z);
HXLINE( 734)					ni0 = (ni0 + normalStride);
            				}
HXLINE( 738)				if (bakeTangents) {
HXLINE( 739)					i1 = (ti0 + 1);
HXLINE( 740)					i2 = (ti0 + 2);
HXLINE( 741)					vector->x = tangents->get(ti0);
HXLINE( 742)					vector->y = tangents->get(i1);
HXLINE( 743)					vector->z = tangents->get(i2);
HXLINE( 744)					vector = invTranspose->deltaTransformVector(vector);
HXLINE( 745)					vector->normalize();
HXLINE( 746)					tangents->set(ti0,vector->x);
HXLINE( 747)					tangents->set(i1,vector->y);
HXLINE( 748)					tangents->set(i2,vector->z);
HXLINE( 749)					ti0 = (ti0 + tangentStride);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,applyTransformation,(void))

 ::openfl::_Vector::FloatVector SubGeometryBase_obj::updateDummyUVs( ::openfl::_Vector::FloatVector target){
            	HX_GC_STACKFRAME(&_hx_pos_ec1ff890e1dd75ac_755_updateDummyUVs)
HXLINE( 756)		this->_uvsDirty = false;
HXLINE( 759)		int stride = this->get_UVStride();
HXLINE( 760)		int skip = (stride - 2);
HXLINE( 761)		int len = this->_vertexData->get_length();
HXDLIN( 761)		int len1 = ::Std_obj::_hx_int(((( (Float)(len) ) / ( (Float)(this->get_vertexStride()) )) * ( (Float)(stride) )));
HXLINE( 763)		if (::hx::IsNull( target )) {
HXLINE( 764)			int length = null();
HXDLIN( 764)			bool fixed = null();
HXDLIN( 764)			::Array< Float > array = null();
HXDLIN( 764)			target =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            		}
HXLINE( 765)		target->fixed = false;
HXLINE( 766)		target->set_length(len1);
HXLINE( 767)		target->fixed = true;
HXLINE( 758)		int idx = this->get_UVOffset();
HXDLIN( 758)		int uvIdx = 0;
HXLINE( 771)		while((idx < len1)){
HXLINE( 772)			{
HXLINE( 772)				idx = (idx + 1);
HXDLIN( 772)				target->set((idx - 1),(( (Float)(uvIdx) ) * ((Float).5)));
            			}
HXLINE( 773)			{
HXLINE( 773)				idx = (idx + 1);
HXDLIN( 773)				target->set((idx - 1),(((Float)1.0) - ( (Float)((uvIdx & 1)) )));
            			}
HXLINE( 774)			idx = (idx + skip);
HXLINE( 776)			uvIdx = (uvIdx + 1);
HXDLIN( 776)			if ((uvIdx == 3)) {
HXLINE( 777)				uvIdx = 0;
            			}
            		}
HXLINE( 780)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubGeometryBase_obj,updateDummyUVs,return )


::hx::ObjectPtr< SubGeometryBase_obj > SubGeometryBase_obj::__new() {
	::hx::ObjectPtr< SubGeometryBase_obj > __this = new SubGeometryBase_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SubGeometryBase_obj > SubGeometryBase_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SubGeometryBase_obj *__this = (SubGeometryBase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SubGeometryBase_obj), true, "away3d.core.base.SubGeometryBase"));
	*(void **)__this = SubGeometryBase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SubGeometryBase_obj::SubGeometryBase_obj()
{
}

void SubGeometryBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SubGeometryBase);
	HX_MARK_MEMBER_NAME(_parentGeometry,"_parentGeometry");
	HX_MARK_MEMBER_NAME(_vertexData,"_vertexData");
	HX_MARK_MEMBER_NAME(_faceNormalsDirty,"_faceNormalsDirty");
	HX_MARK_MEMBER_NAME(_faceTangentsDirty,"_faceTangentsDirty");
	HX_MARK_MEMBER_NAME(_faceTangents,"_faceTangents");
	HX_MARK_MEMBER_NAME(_indices,"_indices");
	HX_MARK_MEMBER_NAME(_indexBuffer,"_indexBuffer");
	HX_MARK_MEMBER_NAME(_numIndices,"_numIndices");
	HX_MARK_MEMBER_NAME(_indexBufferContext,"_indexBufferContext");
	HX_MARK_MEMBER_NAME(_indicesInvalid,"_indicesInvalid");
	HX_MARK_MEMBER_NAME(_numTriangles,"_numTriangles");
	HX_MARK_MEMBER_NAME(_autoDeriveVertexNormals,"_autoDeriveVertexNormals");
	HX_MARK_MEMBER_NAME(_autoDeriveVertexTangents,"_autoDeriveVertexTangents");
	HX_MARK_MEMBER_NAME(_autoGenerateUVs,"_autoGenerateUVs");
	HX_MARK_MEMBER_NAME(_useFaceWeights,"_useFaceWeights");
	HX_MARK_MEMBER_NAME(_vertexNormalsDirty,"_vertexNormalsDirty");
	HX_MARK_MEMBER_NAME(_vertexTangentsDirty,"_vertexTangentsDirty");
	HX_MARK_MEMBER_NAME(_faceNormals,"_faceNormals");
	HX_MARK_MEMBER_NAME(_faceWeights,"_faceWeights");
	HX_MARK_MEMBER_NAME(_scaleU,"_scaleU");
	HX_MARK_MEMBER_NAME(_scaleV,"_scaleV");
	HX_MARK_MEMBER_NAME(_uvsDirty,"_uvsDirty");
	HX_MARK_END_CLASS();
}

void SubGeometryBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_parentGeometry,"_parentGeometry");
	HX_VISIT_MEMBER_NAME(_vertexData,"_vertexData");
	HX_VISIT_MEMBER_NAME(_faceNormalsDirty,"_faceNormalsDirty");
	HX_VISIT_MEMBER_NAME(_faceTangentsDirty,"_faceTangentsDirty");
	HX_VISIT_MEMBER_NAME(_faceTangents,"_faceTangents");
	HX_VISIT_MEMBER_NAME(_indices,"_indices");
	HX_VISIT_MEMBER_NAME(_indexBuffer,"_indexBuffer");
	HX_VISIT_MEMBER_NAME(_numIndices,"_numIndices");
	HX_VISIT_MEMBER_NAME(_indexBufferContext,"_indexBufferContext");
	HX_VISIT_MEMBER_NAME(_indicesInvalid,"_indicesInvalid");
	HX_VISIT_MEMBER_NAME(_numTriangles,"_numTriangles");
	HX_VISIT_MEMBER_NAME(_autoDeriveVertexNormals,"_autoDeriveVertexNormals");
	HX_VISIT_MEMBER_NAME(_autoDeriveVertexTangents,"_autoDeriveVertexTangents");
	HX_VISIT_MEMBER_NAME(_autoGenerateUVs,"_autoGenerateUVs");
	HX_VISIT_MEMBER_NAME(_useFaceWeights,"_useFaceWeights");
	HX_VISIT_MEMBER_NAME(_vertexNormalsDirty,"_vertexNormalsDirty");
	HX_VISIT_MEMBER_NAME(_vertexTangentsDirty,"_vertexTangentsDirty");
	HX_VISIT_MEMBER_NAME(_faceNormals,"_faceNormals");
	HX_VISIT_MEMBER_NAME(_faceWeights,"_faceWeights");
	HX_VISIT_MEMBER_NAME(_scaleU,"_scaleU");
	HX_VISIT_MEMBER_NAME(_scaleV,"_scaleV");
	HX_VISIT_MEMBER_NAME(_uvsDirty,"_uvsDirty");
}

::hx::Val SubGeometryBase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return ::hx::Val( scale_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UVData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UVData() ); }
		if (HX_FIELD_EQ(inName,"scaleU") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scaleU() ); }
		if (HX_FIELD_EQ(inName,"scaleV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scaleV() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_scaleU") ) { return ::hx::Val( _scaleU ); }
		if (HX_FIELD_EQ(inName,"_scaleV") ) { return ::hx::Val( _scaleV ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleUV") ) { return ::hx::Val( scaleUV_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"UVStride") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UVStride() ); }
		if (HX_FIELD_EQ(inName,"UVOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UVOffset() ); }
		if (HX_FIELD_EQ(inName,"_indices") ) { return ::hx::Val( _indices ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"indexData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_indexData() ); }
		if (HX_FIELD_EQ(inName,"_uvsDirty") ) { return ::hx::Val( _uvsDirty ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexData() ); }
		if (HX_FIELD_EQ(inName,"get_UVData") ) { return ::hx::Val( get_UVData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleU") ) { return ::hx::Val( get_scaleU_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleV") ) { return ::hx::Val( get_scaleV_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"faceNormals") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_faceNormals() ); }
		if (HX_FIELD_EQ(inName,"_vertexData") ) { return ::hx::Val( _vertexData ); }
		if (HX_FIELD_EQ(inName,"_numIndices") ) { return ::hx::Val( _numIndices ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numTriangles") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numTriangles() ); }
		if (HX_FIELD_EQ(inName,"vertexStride") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexStride() ); }
		if (HX_FIELD_EQ(inName,"vertexOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexOffset() ); }
		if (HX_FIELD_EQ(inName,"_indexBuffer") ) { return ::hx::Val( _indexBuffer ); }
		if (HX_FIELD_EQ(inName,"_faceNormals") ) { return ::hx::Val( _faceNormals ); }
		if (HX_FIELD_EQ(inName,"_faceWeights") ) { return ::hx::Val( _faceWeights ); }
		if (HX_FIELD_EQ(inName,"get_UVStride") ) { return ::hx::Val( get_UVStride_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UVOffset") ) { return ::hx::Val( get_UVOffset_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_faceTangents") ) { return ::hx::Val( _faceTangents ); }
		if (HX_FIELD_EQ(inName,"_numTriangles") ) { return ::hx::Val( _numTriangles ); }
		if (HX_FIELD_EQ(inName,"get_indexData") ) { return ::hx::Val( get_indexData_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFaceWeights") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_useFaceWeights() ); }
		if (HX_FIELD_EQ(inName,"parentGeometry") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_parentGeometry() ); }
		if (HX_FIELD_EQ(inName,"getIndexBuffer") ) { return ::hx::Val( getIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexData") ) { return ::hx::Val( get_vertexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDummyUVs") ) { return ::hx::Val( updateDummyUVs_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_parentGeometry") ) { return ::hx::Val( _parentGeometry ); }
		if (HX_FIELD_EQ(inName,"_indicesInvalid") ) { return ::hx::Val( _indicesInvalid ); }
		if (HX_FIELD_EQ(inName,"_useFaceWeights") ) { return ::hx::Val( _useFaceWeights ); }
		if (HX_FIELD_EQ(inName,"updateIndexData") ) { return ::hx::Val( updateIndexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_faceNormals") ) { return ::hx::Val( get_faceNormals_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vertexNormalData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexNormalData() ); }
		if (HX_FIELD_EQ(inName,"_autoGenerateUVs") ) { return ::hx::Val( _autoGenerateUVs ); }
		if (HX_FIELD_EQ(inName,"get_numTriangles") ) { return ::hx::Val( get_numTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexStride") ) { return ::hx::Val( get_vertexStride_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexOffset") ) { return ::hx::Val( get_vertexOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidateBounds") ) { return ::hx::Val( invalidateBounds_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vertexTangentData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexTangentData() ); }
		if (HX_FIELD_EQ(inName,"_faceNormalsDirty") ) { return ::hx::Val( _faceNormalsDirty ); }
		if (HX_FIELD_EQ(inName,"updateFaceNormals") ) { return ::hx::Val( updateFaceNormals_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidateBuffers") ) { return ::hx::Val( invalidateBuffers_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexPositionData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexPositionData() ); }
		if (HX_FIELD_EQ(inName,"vertexNormalStride") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexNormalStride() ); }
		if (HX_FIELD_EQ(inName,"vertexNormalOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexNormalOffset() ); }
		if (HX_FIELD_EQ(inName,"_faceTangentsDirty") ) { return ::hx::Val( _faceTangentsDirty ); }
		if (HX_FIELD_EQ(inName,"get_useFaceWeights") ) { return ::hx::Val( get_useFaceWeights_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useFaceWeights") ) { return ::hx::Val( set_useFaceWeights_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFaceTangents") ) { return ::hx::Val( updateFaceTangents_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_parentGeometry") ) { return ::hx::Val( get_parentGeometry_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_parentGeometry") ) { return ::hx::Val( set_parentGeometry_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"vertexTangentStride") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexTangentStride() ); }
		if (HX_FIELD_EQ(inName,"vertexTangentOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vertexTangentOffset() ); }
		if (HX_FIELD_EQ(inName,"_indexBufferContext") ) { return ::hx::Val( _indexBufferContext ); }
		if (HX_FIELD_EQ(inName,"_vertexNormalsDirty") ) { return ::hx::Val( _vertexNormalsDirty ); }
		if (HX_FIELD_EQ(inName,"updateVertexNormals") ) { return ::hx::Val( updateVertexNormals_dyn() ); }
		if (HX_FIELD_EQ(inName,"disposeIndexBuffers") ) { return ::hx::Val( disposeIndexBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyTransformation") ) { return ::hx::Val( applyTransformation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"autoGenerateDummyUVs") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoGenerateDummyUVs() ); }
		if (HX_FIELD_EQ(inName,"_vertexTangentsDirty") ) { return ::hx::Val( _vertexTangentsDirty ); }
		if (HX_FIELD_EQ(inName,"updateVertexTangents") ) { return ::hx::Val( updateVertexTangents_dyn() ); }
		if (HX_FIELD_EQ(inName,"disposeVertexBuffers") ) { return ::hx::Val( disposeVertexBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexNormalData") ) { return ::hx::Val( get_vertexNormalData_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_vertexTangentData") ) { return ::hx::Val( get_vertexTangentData_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_vertexPositionData") ) { return ::hx::Val( get_vertexPositionData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexNormalStride") ) { return ::hx::Val( get_vertexNormalStride_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexNormalOffset") ) { return ::hx::Val( get_vertexNormalOffset_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"autoDeriveVertexNormals") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoDeriveVertexNormals() ); }
		if (HX_FIELD_EQ(inName,"get_vertexTangentStride") ) { return ::hx::Val( get_vertexTangentStride_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexTangentOffset") ) { return ::hx::Val( get_vertexTangentOffset_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"autoDeriveVertexTangents") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoDeriveVertexTangents() ); }
		if (HX_FIELD_EQ(inName,"_autoDeriveVertexNormals") ) { return ::hx::Val( _autoDeriveVertexNormals ); }
		if (HX_FIELD_EQ(inName,"get_autoGenerateDummyUVs") ) { return ::hx::Val( get_autoGenerateDummyUVs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoGenerateDummyUVs") ) { return ::hx::Val( set_autoGenerateDummyUVs_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_autoDeriveVertexTangents") ) { return ::hx::Val( _autoDeriveVertexTangents ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"get_autoDeriveVertexNormals") ) { return ::hx::Val( get_autoDeriveVertexNormals_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoDeriveVertexNormals") ) { return ::hx::Val( set_autoDeriveVertexNormals_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"get_autoDeriveVertexTangents") ) { return ::hx::Val( get_autoDeriveVertexTangents_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoDeriveVertexTangents") ) { return ::hx::Val( set_autoDeriveVertexTangents_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SubGeometryBase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_scaleU") ) { _scaleU=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaleV") ) { _scaleV=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_indices") ) { _indices=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_uvsDirty") ) { _uvsDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexData") ) { _vertexData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_numIndices") ) { _numIndices=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_indexBuffer") ) { _indexBuffer=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_faceNormals") ) { _faceNormals=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_faceWeights") ) { _faceWeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_faceTangents") ) { _faceTangents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_numTriangles") ) { _numTriangles=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFaceWeights") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_useFaceWeights(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"parentGeometry") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_parentGeometry(inValue.Cast<  ::away3d::core::base::Geometry >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_parentGeometry") ) { _parentGeometry=inValue.Cast<  ::away3d::core::base::Geometry >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_indicesInvalid") ) { _indicesInvalid=inValue.Cast<  ::openfl::_Vector::BoolVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_useFaceWeights") ) { _useFaceWeights=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_autoGenerateUVs") ) { _autoGenerateUVs=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_faceNormalsDirty") ) { _faceNormalsDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_faceTangentsDirty") ) { _faceTangentsDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_indexBufferContext") ) { _indexBufferContext=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_vertexNormalsDirty") ) { _vertexNormalsDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"autoGenerateDummyUVs") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoGenerateDummyUVs(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_vertexTangentsDirty") ) { _vertexTangentsDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"autoDeriveVertexNormals") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoDeriveVertexNormals(inValue.Cast< bool >()) ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"autoDeriveVertexTangents") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoDeriveVertexTangents(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_autoDeriveVertexNormals") ) { _autoDeriveVertexNormals=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_autoDeriveVertexTangents") ) { _autoDeriveVertexTangents=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SubGeometryBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("autoGenerateDummyUVs",ae,a7,30,ba));
	outFields->push(HX_("autoDeriveVertexNormals",12,6c,f6,ae));
	outFields->push(HX_("useFaceWeights",d7,1b,cf,b9));
	outFields->push(HX_("numTriangles",85,39,b1,26));
	outFields->push(HX_("indexData",5c,0e,71,fe));
	outFields->push(HX_("autoDeriveVertexTangents",a8,c5,7b,6e));
	outFields->push(HX_("faceNormals",4f,61,44,52));
	outFields->push(HX_("UVStride",5a,5d,ba,3b));
	outFields->push(HX_("vertexData",ae,df,1f,d3));
	outFields->push(HX_("vertexPositionData",f7,d8,26,0b));
	outFields->push(HX_("vertexNormalData",75,18,42,9c));
	outFields->push(HX_("vertexTangentData",8b,d4,d1,fe));
	outFields->push(HX_("UVData",2b,11,08,ae));
	outFields->push(HX_("vertexStride",9d,12,45,b1));
	outFields->push(HX_("vertexNormalStride",24,4b,fc,b1));
	outFields->push(HX_("vertexTangentStride",ba,b8,03,a5));
	outFields->push(HX_("vertexOffset",17,8a,54,00));
	outFields->push(HX_("vertexNormalOffset",9e,c2,0b,01));
	outFields->push(HX_("vertexTangentOffset",34,30,13,f4));
	outFields->push(HX_("UVOffset",d4,d4,c9,8a));
	outFields->push(HX_("parentGeometry",fc,fd,80,9a));
	outFields->push(HX_("scaleU",8b,ea,25,3c));
	outFields->push(HX_("scaleV",8c,ea,25,3c));
	outFields->push(HX_("_parentGeometry",9b,46,e1,e3));
	outFields->push(HX_("_vertexData",cd,ac,a9,a5));
	outFields->push(HX_("_faceNormalsDirty",a2,2e,e6,30));
	outFields->push(HX_("_faceTangentsDirty",08,1f,13,7c));
	outFields->push(HX_("_faceTangents",aa,f8,d2,91));
	outFields->push(HX_("_indices",a8,a0,0c,1d));
	outFields->push(HX_("_indexBuffer",b3,13,b0,5b));
	outFields->push(HX_("_numIndices",a0,52,fe,e5));
	outFields->push(HX_("_indexBufferContext",7c,d6,d6,1d));
	outFields->push(HX_("_indicesInvalid",2f,47,7b,f5));
	outFields->push(HX_("_numTriangles",64,cc,1f,09));
	outFields->push(HX_("_autoDeriveVertexNormals",93,97,8d,99));
	outFields->push(HX_("_autoDeriveVertexTangents",07,ab,2a,c8));
	outFields->push(HX_("_autoGenerateUVs",2f,fe,05,9f));
	outFields->push(HX_("_useFaceWeights",76,64,2f,03));
	outFields->push(HX_("_vertexNormalsDirty",a9,79,1a,b4));
	outFields->push(HX_("_vertexTangentsDirty",21,7a,a0,c6));
	outFields->push(HX_("_faceNormals",50,0f,4e,b8));
	outFields->push(HX_("_faceWeights",df,76,70,fc));
	outFields->push(HX_("_scaleU",2a,fc,9c,aa));
	outFields->push(HX_("_scaleV",2b,fc,9c,aa));
	outFields->push(HX_("_uvsDirty",1f,1b,91,fe));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SubGeometryBase_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::away3d::core::base::Geometry */ ,(int)offsetof(SubGeometryBase_obj,_parentGeometry),HX_("_parentGeometry",9b,46,e1,e3)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(SubGeometryBase_obj,_vertexData),HX_("_vertexData",cd,ac,a9,a5)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_faceNormalsDirty),HX_("_faceNormalsDirty",a2,2e,e6,30)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_faceTangentsDirty),HX_("_faceTangentsDirty",08,1f,13,7c)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(SubGeometryBase_obj,_faceTangents),HX_("_faceTangents",aa,f8,d2,91)},
	{::hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(SubGeometryBase_obj,_indices),HX_("_indices",a8,a0,0c,1d)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(SubGeometryBase_obj,_indexBuffer),HX_("_indexBuffer",b3,13,b0,5b)},
	{::hx::fsInt,(int)offsetof(SubGeometryBase_obj,_numIndices),HX_("_numIndices",a0,52,fe,e5)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(SubGeometryBase_obj,_indexBufferContext),HX_("_indexBufferContext",7c,d6,d6,1d)},
	{::hx::fsObject /*  ::openfl::_Vector::BoolVector */ ,(int)offsetof(SubGeometryBase_obj,_indicesInvalid),HX_("_indicesInvalid",2f,47,7b,f5)},
	{::hx::fsInt,(int)offsetof(SubGeometryBase_obj,_numTriangles),HX_("_numTriangles",64,cc,1f,09)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_autoDeriveVertexNormals),HX_("_autoDeriveVertexNormals",93,97,8d,99)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_autoDeriveVertexTangents),HX_("_autoDeriveVertexTangents",07,ab,2a,c8)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_autoGenerateUVs),HX_("_autoGenerateUVs",2f,fe,05,9f)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_useFaceWeights),HX_("_useFaceWeights",76,64,2f,03)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_vertexNormalsDirty),HX_("_vertexNormalsDirty",a9,79,1a,b4)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_vertexTangentsDirty),HX_("_vertexTangentsDirty",21,7a,a0,c6)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(SubGeometryBase_obj,_faceNormals),HX_("_faceNormals",50,0f,4e,b8)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(SubGeometryBase_obj,_faceWeights),HX_("_faceWeights",df,76,70,fc)},
	{::hx::fsFloat,(int)offsetof(SubGeometryBase_obj,_scaleU),HX_("_scaleU",2a,fc,9c,aa)},
	{::hx::fsFloat,(int)offsetof(SubGeometryBase_obj,_scaleV),HX_("_scaleV",2b,fc,9c,aa)},
	{::hx::fsBool,(int)offsetof(SubGeometryBase_obj,_uvsDirty),HX_("_uvsDirty",1f,1b,91,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SubGeometryBase_obj_sStaticStorageInfo = 0;
#endif

static ::String SubGeometryBase_obj_sMemberFields[] = {
	HX_("_parentGeometry",9b,46,e1,e3),
	HX_("_vertexData",cd,ac,a9,a5),
	HX_("_faceNormalsDirty",a2,2e,e6,30),
	HX_("_faceTangentsDirty",08,1f,13,7c),
	HX_("_faceTangents",aa,f8,d2,91),
	HX_("_indices",a8,a0,0c,1d),
	HX_("_indexBuffer",b3,13,b0,5b),
	HX_("_numIndices",a0,52,fe,e5),
	HX_("_indexBufferContext",7c,d6,d6,1d),
	HX_("_indicesInvalid",2f,47,7b,f5),
	HX_("_numTriangles",64,cc,1f,09),
	HX_("_autoDeriveVertexNormals",93,97,8d,99),
	HX_("_autoDeriveVertexTangents",07,ab,2a,c8),
	HX_("_autoGenerateUVs",2f,fe,05,9f),
	HX_("_useFaceWeights",76,64,2f,03),
	HX_("_vertexNormalsDirty",a9,79,1a,b4),
	HX_("_vertexTangentsDirty",21,7a,a0,c6),
	HX_("_faceNormals",50,0f,4e,b8),
	HX_("_faceWeights",df,76,70,fc),
	HX_("_scaleU",2a,fc,9c,aa),
	HX_("_scaleV",2b,fc,9c,aa),
	HX_("_uvsDirty",1f,1b,91,fe),
	HX_("get_autoGenerateDummyUVs",37,c5,cc,fc),
	HX_("set_autoGenerateDummyUVs",ab,46,a7,0f),
	HX_("get_autoDeriveVertexNormals",29,aa,98,7b),
	HX_("set_autoDeriveVertexNormals",35,89,31,be),
	HX_("get_useFaceWeights",a0,fc,68,55),
	HX_("set_useFaceWeights",14,2f,18,32),
	HX_("get_numTriangles",0e,26,50,2b),
	HX_("getIndexBuffer",bc,b8,44,7d),
	HX_("updateFaceTangents",74,a1,71,27),
	HX_("updateFaceNormals",c6,0d,ae,b6),
	HX_("updateVertexNormals",9f,a9,a0,31),
	HX_("updateVertexTangents",7b,63,c7,40),
	HX_("dispose",9f,80,4c,bb),
	HX_("get_indexData",33,e2,d4,bf),
	HX_("updateIndexData",13,df,fb,4d),
	HX_("disposeIndexBuffers",c0,55,9f,d2),
	HX_("disposeVertexBuffers",50,7c,4a,24),
	HX_("get_autoDeriveVertexTangents",b1,db,cf,af),
	HX_("set_autoDeriveVertexTangents",25,27,fa,b2),
	HX_("get_faceNormals",e6,18,26,13),
	HX_("invalidateBuffers",38,a7,59,f9),
	HX_("get_UVStride",63,11,d4,f0),
	HX_("get_vertexData",f7,67,15,49),
	HX_("get_vertexPositionData",40,52,bb,64),
	HX_("get_vertexNormalData",7e,7d,ac,ba),
	HX_("get_vertexTangentData",62,d7,7f,7d),
	HX_("get_UVData",f4,80,8f,9e),
	HX_("get_vertexStride",26,ff,e3,b5),
	HX_("get_vertexNormalStride",6d,c4,90,0b),
	HX_("get_vertexTangentStride",51,5f,59,ad),
	HX_("get_vertexOffset",a0,76,f3,04),
	HX_("get_vertexNormalOffset",e7,3b,a0,5a),
	HX_("get_vertexTangentOffset",cb,d6,68,fc),
	HX_("get_UVOffset",dd,88,e3,3f),
	HX_("invalidateBounds",50,e2,c4,70),
	HX_("get_parentGeometry",c5,de,1a,36),
	HX_("set_parentGeometry",39,11,ca,12),
	HX_("get_scaleU",54,5a,ad,2c),
	HX_("get_scaleV",55,5a,ad,2c),
	HX_("scaleUV",6b,4f,07,65),
	HX_("scale",8a,ce,ce,78),
	HX_("applyTransformation",d7,3b,1e,68),
	HX_("updateDummyUVs",f3,f8,fc,35),
	::String(null()) };

::hx::Class SubGeometryBase_obj::__mClass;

void SubGeometryBase_obj::__register()
{
	SubGeometryBase_obj _hx_dummy;
	SubGeometryBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("away3d.core.base.SubGeometryBase",06,f3,1f,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SubGeometryBase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SubGeometryBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SubGeometryBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SubGeometryBase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace away3d
} // end namespace core
} // end namespace base
