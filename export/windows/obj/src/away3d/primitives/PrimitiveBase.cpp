#include <hxcpp.h>

#ifndef INCLUDED_away3d_core_base_CompactSubGeometry
#include <away3d/core/base/CompactSubGeometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_Geometry
#include <away3d/core/base/Geometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_ISubGeometry
#include <away3d/core/base/ISubGeometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_SubGeometryBase
#include <away3d/core/base/SubGeometryBase.h>
#endif
#ifndef INCLUDED_away3d_errors_AbstractMethodError
#include <away3d/errors/AbstractMethodError.h>
#endif
#ifndef INCLUDED_away3d_library_assets_IAsset
#include <away3d/library/assets/IAsset.h>
#endif
#ifndef INCLUDED_away3d_library_assets_NamedAssetBase
#include <away3d/library/assets/NamedAssetBase.h>
#endif
#ifndef INCLUDED_away3d_primitives_PrimitiveBase
#include <away3d/primitives/PrimitiveBase.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a59a85c250da39ab_14_new,"away3d.primitives.PrimitiveBase","new",0x4a54c237,"away3d.primitives.PrimitiveBase.new","away3d/primitives/PrimitiveBase.hx",14,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_37_get_subGeometries,"away3d.primitives.PrimitiveBase","get_subGeometries",0x0fdc3c9e,"away3d.primitives.PrimitiveBase.get_subGeometries","away3d/primitives/PrimitiveBase.hx",37,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_50_clone,"away3d.primitives.PrimitiveBase","clone",0xc9e568f4,"away3d.primitives.PrimitiveBase.clone","away3d/primitives/PrimitiveBase.hx",50,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_63_scale,"away3d.primitives.PrimitiveBase","scale",0xfa512421,"away3d.primitives.PrimitiveBase.scale","away3d/primitives/PrimitiveBase.hx",63,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_74_scaleUV,"away3d.primitives.PrimitiveBase","scaleUV",0x0bfb78c2,"away3d.primitives.PrimitiveBase.scaleUV","away3d/primitives/PrimitiveBase.hx",74,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_85_applyTransformation,"away3d.primitives.PrimitiveBase","applyTransformation",0x35968bae,"away3d.primitives.PrimitiveBase.applyTransformation","away3d/primitives/PrimitiveBase.hx",85,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_97_buildGeometry,"away3d.primitives.PrimitiveBase","buildGeometry",0x353dbc97,"away3d.primitives.PrimitiveBase.buildGeometry","away3d/primitives/PrimitiveBase.hx",97,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_106_buildUVs,"away3d.primitives.PrimitiveBase","buildUVs",0xc268a34d,"away3d.primitives.PrimitiveBase.buildUVs","away3d/primitives/PrimitiveBase.hx",106,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_114_invalidateGeometry,"away3d.primitives.PrimitiveBase","invalidateGeometry",0xf0ec0356,"away3d.primitives.PrimitiveBase.invalidateGeometry","away3d/primitives/PrimitiveBase.hx",114,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_122_invalidateUVs,"away3d.primitives.PrimitiveBase","invalidateUVs",0x0ebdd4ee,"away3d.primitives.PrimitiveBase.invalidateUVs","away3d/primitives/PrimitiveBase.hx",122,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_129_updateGeometry,"away3d.primitives.PrimitiveBase","updateGeometry",0x6bcab564,"away3d.primitives.PrimitiveBase.updateGeometry","away3d/primitives/PrimitiveBase.hx",129,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_138_updateUVs,"away3d.primitives.PrimitiveBase","updateUVs",0xee385da0,"away3d.primitives.PrimitiveBase.updateUVs","away3d/primitives/PrimitiveBase.hx",138,0x77975eb9)
HX_LOCAL_STACK_FRAME(_hx_pos_a59a85c250da39ab_144_validate,"away3d.primitives.PrimitiveBase","validate",0x7393d35f,"away3d.primitives.PrimitiveBase.validate","away3d/primitives/PrimitiveBase.hx",144,0x77975eb9)
namespace away3d{
namespace primitives{

void PrimitiveBase_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a59a85c250da39ab_14_new)
HXLINE(  17)		this->_uvDirty = true;
HXLINE(  16)		this->_geomDirty = true;
HXLINE(  27)		super::__construct();
HXLINE(  28)		this->_subGeometry =  ::away3d::core::base::CompactSubGeometry_obj::__alloc( HX_CTX );
HXLINE(  29)		this->_subGeometry->set_autoGenerateDummyUVs(false);
HXLINE(  30)		this->addSubGeometry(this->_subGeometry);
            	}

Dynamic PrimitiveBase_obj::__CreateEmpty() { return new PrimitiveBase_obj; }

void *PrimitiveBase_obj::_hx_vtable = 0;

Dynamic PrimitiveBase_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PrimitiveBase_obj > _hx_result = new PrimitiveBase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PrimitiveBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x156ffae5) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x156ffae5;
		}
	} else {
		return inClassId==(int)0x2818d649 || inClassId==(int)0x37f46043;
	}
}

 ::openfl::_Vector::ObjectVector PrimitiveBase_obj::get_subGeometries(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_37_get_subGeometries)
HXLINE(  38)		if (this->_geomDirty) {
HXLINE(  39)			this->updateGeometry();
            		}
HXLINE(  40)		if (this->_uvDirty) {
HXLINE(  41)			this->updateUVs();
            		}
HXLINE(  43)		return this->super::get_subGeometries();
            	}


 ::away3d::core::base::Geometry PrimitiveBase_obj::clone(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_50_clone)
HXLINE(  51)		if (this->_geomDirty) {
HXLINE(  52)			this->updateGeometry();
            		}
HXLINE(  53)		if (this->_uvDirty) {
HXLINE(  54)			this->updateUVs();
            		}
HXLINE(  56)		return this->super::clone();
            	}


void PrimitiveBase_obj::scale(Float scale){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_63_scale)
HXLINE(  64)		if (this->_geomDirty) {
HXLINE(  65)			this->updateGeometry();
            		}
HXLINE(  67)		this->super::scale(scale);
            	}


void PrimitiveBase_obj::scaleUV(::hx::Null< Float >  __o_scaleU,::hx::Null< Float >  __o_scaleV){
            		Float scaleU = __o_scaleU.Default(1);
            		Float scaleV = __o_scaleV.Default(1);
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_74_scaleUV)
HXLINE(  75)		if (this->_uvDirty) {
HXLINE(  76)			this->updateUVs();
            		}
HXLINE(  78)		this->super::scaleUV(scaleU,scaleV);
            	}


void PrimitiveBase_obj::applyTransformation( ::openfl::geom::Matrix3D transform){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_85_applyTransformation)
HXLINE(  86)		if (this->_geomDirty) {
HXLINE(  87)			this->updateGeometry();
            		}
HXLINE(  88)		this->super::applyTransformation(transform);
            	}


void PrimitiveBase_obj::buildGeometry( ::away3d::core::base::CompactSubGeometry target){
            	HX_GC_STACKFRAME(&_hx_pos_a59a85c250da39ab_97_buildGeometry)
HXDLIN(  97)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PrimitiveBase_obj,buildGeometry,(void))

void PrimitiveBase_obj::buildUVs( ::away3d::core::base::CompactSubGeometry target){
            	HX_GC_STACKFRAME(&_hx_pos_a59a85c250da39ab_106_buildUVs)
HXDLIN( 106)		HX_STACK_DO_THROW( ::away3d::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PrimitiveBase_obj,buildUVs,(void))

void PrimitiveBase_obj::invalidateGeometry(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_114_invalidateGeometry)
HXDLIN( 114)		this->_geomDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,invalidateGeometry,(void))

void PrimitiveBase_obj::invalidateUVs(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_122_invalidateUVs)
HXDLIN( 122)		this->_uvDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,invalidateUVs,(void))

void PrimitiveBase_obj::updateGeometry(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_129_updateGeometry)
HXLINE( 130)		this->buildGeometry(this->_subGeometry);
HXLINE( 131)		this->_geomDirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,updateGeometry,(void))

void PrimitiveBase_obj::updateUVs(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_138_updateUVs)
HXLINE( 139)		this->buildUVs(this->_subGeometry);
HXLINE( 140)		this->_uvDirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,updateUVs,(void))

void PrimitiveBase_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_a59a85c250da39ab_144_validate)
HXLINE( 145)		if (this->_geomDirty) {
HXLINE( 146)			this->updateGeometry();
            		}
HXLINE( 147)		if (this->_uvDirty) {
HXLINE( 148)			this->updateUVs();
            		}
            	}



::hx::ObjectPtr< PrimitiveBase_obj > PrimitiveBase_obj::__new() {
	::hx::ObjectPtr< PrimitiveBase_obj > __this = new PrimitiveBase_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PrimitiveBase_obj > PrimitiveBase_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PrimitiveBase_obj *__this = (PrimitiveBase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PrimitiveBase_obj), true, "away3d.primitives.PrimitiveBase"));
	*(void **)__this = PrimitiveBase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PrimitiveBase_obj::PrimitiveBase_obj()
{
}

void PrimitiveBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PrimitiveBase);
	HX_MARK_MEMBER_NAME(_geomDirty,"_geomDirty");
	HX_MARK_MEMBER_NAME(_uvDirty,"_uvDirty");
	HX_MARK_MEMBER_NAME(_subGeometry,"_subGeometry");
	 ::away3d::core::base::Geometry_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PrimitiveBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_geomDirty,"_geomDirty");
	HX_VISIT_MEMBER_NAME(_uvDirty,"_uvDirty");
	HX_VISIT_MEMBER_NAME(_subGeometry,"_subGeometry");
	 ::away3d::core::base::Geometry_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PrimitiveBase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return ::hx::Val( scale_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scaleUV") ) { return ::hx::Val( scaleUV_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_uvDirty") ) { return ::hx::Val( _uvDirty ); }
		if (HX_FIELD_EQ(inName,"buildUVs") ) { return ::hx::Val( buildUVs_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return ::hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateUVs") ) { return ::hx::Val( updateUVs_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_geomDirty") ) { return ::hx::Val( _geomDirty ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_subGeometry") ) { return ::hx::Val( _subGeometry ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"buildGeometry") ) { return ::hx::Val( buildGeometry_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidateUVs") ) { return ::hx::Val( invalidateUVs_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateGeometry") ) { return ::hx::Val( updateGeometry_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_subGeometries") ) { return ::hx::Val( get_subGeometries_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"invalidateGeometry") ) { return ::hx::Val( invalidateGeometry_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"applyTransformation") ) { return ::hx::Val( applyTransformation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PrimitiveBase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_uvDirty") ) { _uvDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_geomDirty") ) { _geomDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_subGeometry") ) { _subGeometry=inValue.Cast<  ::away3d::core::base::CompactSubGeometry >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PrimitiveBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_geomDirty",77,53,5d,d5));
	outFields->push(HX_("_uvDirty",72,f3,21,d6));
	outFields->push(HX_("_subGeometry",53,96,c1,98));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PrimitiveBase_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PrimitiveBase_obj,_geomDirty),HX_("_geomDirty",77,53,5d,d5)},
	{::hx::fsBool,(int)offsetof(PrimitiveBase_obj,_uvDirty),HX_("_uvDirty",72,f3,21,d6)},
	{::hx::fsObject /*  ::away3d::core::base::CompactSubGeometry */ ,(int)offsetof(PrimitiveBase_obj,_subGeometry),HX_("_subGeometry",53,96,c1,98)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PrimitiveBase_obj_sStaticStorageInfo = 0;
#endif

static ::String PrimitiveBase_obj_sMemberFields[] = {
	HX_("_geomDirty",77,53,5d,d5),
	HX_("_uvDirty",72,f3,21,d6),
	HX_("_subGeometry",53,96,c1,98),
	HX_("get_subGeometries",87,60,24,45),
	HX_("clone",5d,13,63,48),
	HX_("scale",8a,ce,ce,78),
	HX_("scaleUV",6b,4f,07,65),
	HX_("applyTransformation",d7,3b,1e,68),
	HX_("buildGeometry",00,78,79,cd),
	HX_("buildUVs",84,a0,b8,53),
	HX_("invalidateGeometry",4d,4b,c3,5a),
	HX_("invalidateUVs",57,90,f9,a6),
	HX_("updateGeometry",db,f5,d2,07),
	HX_("updateUVs",89,f0,e5,82),
	HX_("validate",96,d0,e3,04),
	::String(null()) };

::hx::Class PrimitiveBase_obj::__mClass;

void PrimitiveBase_obj::__register()
{
	PrimitiveBase_obj _hx_dummy;
	PrimitiveBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("away3d.primitives.PrimitiveBase",c5,da,b3,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PrimitiveBase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PrimitiveBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PrimitiveBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PrimitiveBase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace away3d
} // end namespace primitives
