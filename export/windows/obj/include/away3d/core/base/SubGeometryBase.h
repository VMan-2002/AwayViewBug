#ifndef INCLUDED_away3d_core_base_SubGeometryBase
#define INCLUDED_away3d_core_base_SubGeometryBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(away3d,core,base,Geometry)
HX_DECLARE_CLASS3(away3d,core,base,SubGeometryBase)
HX_DECLARE_CLASS3(away3d,core,managers,Stage3DProxy)
HX_DECLARE_CLASS3(away3d,library,assets,IAsset)
HX_DECLARE_CLASS3(away3d,library,assets,NamedAssetBase)
HX_DECLARE_CLASS2(openfl,_Vector,BoolVector)
HX_DECLARE_CLASS2(openfl,_Vector,FloatVector)
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,IntVector)
HX_DECLARE_CLASS2(openfl,_Vector,ObjectVector)
HX_DECLARE_CLASS2(openfl,display3D,IndexBuffer3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)

namespace away3d{
namespace core{
namespace base{


class HXCPP_CLASS_ATTRIBUTES SubGeometryBase_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SubGeometryBase_obj OBJ_;
		SubGeometryBase_obj();

	public:
		enum { _hx_ClassId = 0x392651b0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="away3d.core.base.SubGeometryBase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"away3d.core.base.SubGeometryBase"); }
		static ::hx::ObjectPtr< SubGeometryBase_obj > __new();
		static ::hx::ObjectPtr< SubGeometryBase_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SubGeometryBase_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SubGeometryBase",63,95,1d,14); }

		 ::away3d::core::base::Geometry _parentGeometry;
		 ::openfl::_Vector::FloatVector _vertexData;
		bool _faceNormalsDirty;
		bool _faceTangentsDirty;
		 ::openfl::_Vector::FloatVector _faceTangents;
		 ::openfl::_Vector::IntVector _indices;
		 ::openfl::_Vector::ObjectVector _indexBuffer;
		int _numIndices;
		 ::openfl::_Vector::ObjectVector _indexBufferContext;
		 ::openfl::_Vector::BoolVector _indicesInvalid;
		int _numTriangles;
		bool _autoDeriveVertexNormals;
		bool _autoDeriveVertexTangents;
		bool _autoGenerateUVs;
		bool _useFaceWeights;
		bool _vertexNormalsDirty;
		bool _vertexTangentsDirty;
		 ::openfl::_Vector::FloatVector _faceNormals;
		 ::openfl::_Vector::FloatVector _faceWeights;
		Float _scaleU;
		Float _scaleV;
		bool _uvsDirty;
		bool get_autoGenerateDummyUVs();
		::Dynamic get_autoGenerateDummyUVs_dyn();

		bool set_autoGenerateDummyUVs(bool value);
		::Dynamic set_autoGenerateDummyUVs_dyn();

		bool get_autoDeriveVertexNormals();
		::Dynamic get_autoDeriveVertexNormals_dyn();

		bool set_autoDeriveVertexNormals(bool value);
		::Dynamic set_autoDeriveVertexNormals_dyn();

		bool get_useFaceWeights();
		::Dynamic get_useFaceWeights_dyn();

		bool set_useFaceWeights(bool value);
		::Dynamic set_useFaceWeights_dyn();

		int get_numTriangles();
		::Dynamic get_numTriangles_dyn();

		 ::openfl::display3D::IndexBuffer3D getIndexBuffer( ::away3d::core::managers::Stage3DProxy stage3DProxy);
		::Dynamic getIndexBuffer_dyn();

		void updateFaceTangents();
		::Dynamic updateFaceTangents_dyn();

		void updateFaceNormals();
		::Dynamic updateFaceNormals_dyn();

		virtual  ::openfl::_Vector::FloatVector updateVertexNormals( ::openfl::_Vector::FloatVector target);
		::Dynamic updateVertexNormals_dyn();

		virtual  ::openfl::_Vector::FloatVector updateVertexTangents( ::openfl::_Vector::FloatVector target);
		::Dynamic updateVertexTangents_dyn();

		virtual void dispose();
		::Dynamic dispose_dyn();

		 ::openfl::_Vector::IntVector get_indexData();
		::Dynamic get_indexData_dyn();

		void updateIndexData( ::openfl::_Vector::IntVector indices);
		::Dynamic updateIndexData_dyn();

		void disposeIndexBuffers( ::openfl::_Vector::ObjectVector buffers);
		::Dynamic disposeIndexBuffers_dyn();

		virtual void disposeVertexBuffers( ::openfl::_Vector::ObjectVector buffers);
		::Dynamic disposeVertexBuffers_dyn();

		bool get_autoDeriveVertexTangents();
		::Dynamic get_autoDeriveVertexTangents_dyn();

		bool set_autoDeriveVertexTangents(bool value);
		::Dynamic set_autoDeriveVertexTangents_dyn();

		 ::openfl::_Vector::FloatVector get_faceNormals();
		::Dynamic get_faceNormals_dyn();

		virtual void invalidateBuffers( ::openfl::_Vector::BoolVector invalid);
		::Dynamic invalidateBuffers_dyn();

		virtual int get_UVStride();
		::Dynamic get_UVStride_dyn();

		virtual  ::openfl::_Vector::FloatVector get_vertexData();
		::Dynamic get_vertexData_dyn();

		virtual  ::openfl::_Vector::FloatVector get_vertexPositionData();
		::Dynamic get_vertexPositionData_dyn();

		virtual  ::openfl::_Vector::FloatVector get_vertexNormalData();
		::Dynamic get_vertexNormalData_dyn();

		virtual  ::openfl::_Vector::FloatVector get_vertexTangentData();
		::Dynamic get_vertexTangentData_dyn();

		virtual  ::openfl::_Vector::FloatVector get_UVData();
		::Dynamic get_UVData_dyn();

		virtual int get_vertexStride();
		::Dynamic get_vertexStride_dyn();

		virtual int get_vertexNormalStride();
		::Dynamic get_vertexNormalStride_dyn();

		virtual int get_vertexTangentStride();
		::Dynamic get_vertexTangentStride_dyn();

		virtual int get_vertexOffset();
		::Dynamic get_vertexOffset_dyn();

		virtual int get_vertexNormalOffset();
		::Dynamic get_vertexNormalOffset_dyn();

		virtual int get_vertexTangentOffset();
		::Dynamic get_vertexTangentOffset_dyn();

		virtual int get_UVOffset();
		::Dynamic get_UVOffset_dyn();

		void invalidateBounds();
		::Dynamic invalidateBounds_dyn();

		 ::away3d::core::base::Geometry get_parentGeometry();
		::Dynamic get_parentGeometry_dyn();

		 ::away3d::core::base::Geometry set_parentGeometry( ::away3d::core::base::Geometry value);
		::Dynamic set_parentGeometry_dyn();

		Float get_scaleU();
		::Dynamic get_scaleU_dyn();

		Float get_scaleV();
		::Dynamic get_scaleV_dyn();

		virtual void scaleUV(::hx::Null< Float >  scaleU,::hx::Null< Float >  scaleV);
		::Dynamic scaleUV_dyn();

		virtual void scale(Float scale);
		::Dynamic scale_dyn();

		virtual void applyTransformation( ::openfl::geom::Matrix3D transform);
		::Dynamic applyTransformation_dyn();

		virtual  ::openfl::_Vector::FloatVector updateDummyUVs( ::openfl::_Vector::FloatVector target);
		::Dynamic updateDummyUVs_dyn();

};

} // end namespace away3d
} // end namespace core
} // end namespace base

#endif /* INCLUDED_away3d_core_base_SubGeometryBase */ 
